# gui/widgets/scope_gui.py

"""
scope_gui.py

Tkinter GUI widget for oscilloscope controls and live plotting.
"""

import tkinter as tk
from tkinter import ttk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

from utils.helpers import format_record_length


class ScopeGUI(tk.LabelFrame):
    """
    Frame containing controls and plot for the oscilloscope.
    """

    def __init__(self, master, scope_ctrl, *args, **kwargs):
        super().__init__(master, text="Oscilloscope", *args, **kwargs)
        self.ctrl = scope_ctrl
        self._build_widgets()
        self._build_plot()

    def _build_widgets(self):
        # Channel selection
        tk.Label(self, text="Channel:").grid(row=0, column=0, sticky="e")
        self.channel_var = tk.IntVar(value=1)
        ttk.Combobox(
            self,
            textvariable=self.channel_var,
            values=[1, 2, 3, 4],
            width=4,
            state="readonly",
        ).grid(row=0, column=1, sticky="w")

        # Trigger controls
        tk.Label(self, text="Trig Src:").grid(row=1, column=0, sticky="e")
        self.trig_src_var = tk.StringVar(value=self.ctrl.get_settings().get("trigger_source", "CH1"))
        ttk.Combobox(
            self,
            textvariable=self.trig_src_var,
            values=["CH1", "CH2", "CH3", "CH4"],
            width=4,
            state="readonly",
        ).grid(row=1, column=1, sticky="w")

        tk.Label(self, text="Trig Level (V):").grid(row=1, column=2, sticky="e")
        self.trig_level_var = tk.DoubleVar(value=self.ctrl.get_settings().get("trigger_level", 0.0))
        ttk.Entry(self, textvariable=self.trig_level_var, width=8).grid(row=1, column=3, sticky="w")
        ttk.Button(self, text="Set Trigger", command=self._apply_trigger).grid(row=1, column=4, padx=5)

        # Record length display
        rec = self.ctrl.get_settings().get("record_length", 2500)
        tk.Label(self, text="Rec Len:").grid(row=2, column=0, sticky="e")
        self.rec_label = tk.Label(self, text=format_record_length(rec))
        self.rec_label.grid(row=2, column=1, sticky="w")

        # Acquire button
        ttk.Button(self, text="Acquire", command=self._acquire).grid(row=2, column=3, columnspan=2, pady=5)

    def _build_plot(self):
        # Matplotlib Figure
        self.fig, self.ax = plt.subplots(figsize=(5, 2.5))
        self.ax.set_title("Scope Waveform")
        self.ax.set_xlabel("Time (s)")
        self.ax.set_ylabel("Voltage (V)")
        self.line, = self.ax.plot([], [], lw=1)

        # Embed in Tkinter
        self.canvas = FigureCanvasTkAgg(self.fig, master=self)
        self.canvas.get_tk_widget().grid(row=3, column=0, columnspan=5, pady=5)

    def _apply_trigger(self):
        ch = self.channel_var.get()
        lvl = self.trig_level_var.get()
        self.ctrl.set_trigger(ch, lvl)

    def _acquire(self):
        meas = self.ctrl.read_waveform(channel=self.channel_var.get())
        self._update_plot(meas.time, meas.voltage)
        # update rec len display in case changed
        rec = meas.params.get("record_length", len(meas.voltage))
        self.rec_label.config(text=format_record_length(rec))

    def _update_plot(self, time_axis, voltage):
        self.line.set_data(time_axis, voltage)
        self.ax.set_xlim(time_axis.min(), time_axis.max())
        self.ax.set_ylim(voltage.min(), voltage.max())
        self.canvas.draw_idle()
